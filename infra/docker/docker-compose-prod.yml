services:
  api-node:
    image: api-node
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - frontend
      - backend
    ports:
      - "3000:3000"
    init: true
    depends_on:
      db:
        condition: service_healthy
    environment:
      MONGO_URI: ${MONGO_URI}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "/usr/src/app/healthcheck.js"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
  seed:
    image: api-node
    depends_on:
      db:
        condition: service_healthy
      mongo-init-replica:
        condition: service_completed_successfully
    networks:
      - backend
    working_dir: /usr/src/app
    environment:
      MONGO_URI: ${MONGO_URI}
      MONGODB_DB: ${MONGODB_DB}
      NODE_ENV: production
    command: ["node", "dist/db.js", "--seed"]
    restart: "no"
  db:
    image: mongo:7.0.14-jammy
    container_name: mongo
    command: ["--replSet", "rs0", "--bind_ip_all"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--quiet",
          "--username",
          "${MONGO_INITDB_ROOT_USERNAME}",
          "--password",
          "${MONGO_INITDB_ROOT_PASSWORD}",
          "--authenticationDatabase",
          "admin",
          "--eval",
          "db.adminCommand({ ping: 1 })",
        ]
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 20s

  # One-shot init to actually enable the single-node replica set
  mongo-init-replica:
    image: mongo:7.0.14-jammy
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    entrypoint: ["/bin/bash", "-lc"]
    command: >
      'mongosh --host db:27017
      --username "$MONGO_INITDB_ROOT_USERNAME"
      --password "$MONGO_INITDB_ROOT_PASSWORD"
      --authenticationDatabase admin
      --eval "try { rs.status() } catch (e) { rs.initiate({_id:\"rs0\", members:[{_id:0, host:\"db:27017\"}]}) }"'
    restart: "no"

volumes:
  mongo-data:
  mongo-config:

networks:
  frontend:
  backend:
